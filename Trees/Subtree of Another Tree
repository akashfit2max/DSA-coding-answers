/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        if(root==nullptr) {
            return false;
        }
        if(subRoot==nullptr) {
            return true;
        }
        if(isSame(root,subRoot)) {
            return true;
        }
//         find in left or right subtree
        return isSubtree(root->left,subRoot) || isSubtree(root->right,subRoot);
    }
    
    
    bool isSame(TreeNode* s, TreeNode* t) {
        if(s==nullptr || t==nullptr) {
            return s==nullptr && t==nullptr;
        }
        else if(s->val==t->val) {
            return isSame(s->left,t->left) && isSame(s->right,t->right);
        }
        else {
            return false;
        }
    }
    
};