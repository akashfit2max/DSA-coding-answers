Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.

An uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.

A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.

For example, "abc" is a subsequence of "aebdc" because you can delete the underlined characters in "aebdc" to get "abc". Other subsequences of "aebdc" include "aebdc", "aeb", and "" (empty string).
 

Example 1:

Input: strs = ["aba","cdc","eae"]
Output: 3


Example 2:

Input: strs = ["aaa","aaa","aa"]
Output: -1
 

Constraints:

2 <= strs.length <= 50
1 <= strs[i].length <= 10
strs[i] consists of lowercase English letters.






class Solution {
public:
   bool isSubsequence(string s1, string s2){
        int i=0;
        int j = 0;
        
        // s1 is a smaller string
        
        while(i < s1.size() && j<s2.size()){
            if(s1[i] == s2[j])
                i++;
                
            j++;
        }
         
        return i == s1.size();
    }
    int findLUSlength(vector<string>& strs) {
        sort(strs.begin(), strs.end(), [](string& a, string& b) { return a.size() > b.size(); });
        
        for(int i=0;i<strs.size();i++) {
            // cout<<strs[i];
            bool f =false;
            for(int j=0;j<strs.size();j++) {
                if(i!=j && isSubsequence(strs[i],strs[j])) {
                    f = true;
                    break;
                }
            }
            if(f == false) {
                return strs[i].size();
            }
        }
     return -1;   
    }
};
