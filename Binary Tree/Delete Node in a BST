/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    TreeNode* helper(TreeNode* root) {
        if(root->left == nullptr) {
            return root->right;
        }
        else if(root->right == nullptr) {
            return root->left;
        }
        // get the right child of the root
        TreeNode* rightChild = root->right;
        // find the last right child from the left
        TreeNode* lastRight = findLastRight(root->left);
        // connect the lastright with right child
        lastRight->right = rightChild;
        return root->left;
    }

    TreeNode* findLastRight(TreeNode* root) {
        if(root->right == nullptr) {
            return root;
        }
        return findLastRight(root->right);
    }

    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root == nullptr) return nullptr;
        TreeNode* dummy = root;

        // find where the node lies
        while(root != nullptr) {
            // check if it is in the left
            if(root->val > key) {
                if(root->left != nullptr && root->left->val == key) {
                    root->left = helper(root->left);
                    break;
                }
                else {
                    root = root->left;
                }
            }
             else {
                 // check in the right
                if(root->right != nullptr && root->right->val == key) {
                    root->right = helper(root->right);
                    break;
                }
                else {
                    root = root->right;
                }
             }     
        }
        return dummy;
    }
    
};