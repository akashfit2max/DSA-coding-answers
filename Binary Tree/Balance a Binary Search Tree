/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
      vector<int>v;
    void inorder(TreeNode* root, vector<int>& v)
    {
        if(root==nullptr)
        {
            return;
        }
        inorder(root->left,v);
        v.push_back(root->val);
        inorder(root->right,v);
    }
    
    TreeNode* solve(int s, int e)
    {
        if(s>e)
        {
            return nullptr;
        }
        int m = (s+e)/2;
        TreeNode* newRoot = new TreeNode(v[m]);
        newRoot->left = solve(s,m-1);
        newRoot->right = solve(m+1,e);
        
        return newRoot;
    }
    
    TreeNode* balanceBST(TreeNode* root) {
        inorder(root,v);
        int s = 0;
        int e = v.size()-1;
        return solve(s,e);
    }
};